name: phpunit
on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  test:  
    env:
        S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        S3_BUCKET: test.macbre.net
        S3_REGION: eu-west-1

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # https://github.com/marketplace/actions/setup-php-action#tada-php-support
          - php-version: "7.3"
          - php-version: "7.4"
          - php-version: "8.0"
          - php-version: "8.1"
          - php-version: "8.2"
          # TODO: for older PHP versions we want to explicitly state the PHPUnit version to be used
          # https://phpunit.de/supported-versions.html
          - php-version: "5.3"
            phpunit: "4"
          - php-version: "5.4"
            phpunit: "4"
          - php-version: "5.5"
            phpunit: "4"
          - php-version: "5.6"
            phpunit: "5"
          - php-version: "7.0"
            phpunit: "5"
          - php-version: "7.1"
            phpunit: "5"
          - php-version: "7.2"
            phpunit: "8"

    steps:
    - name: Install s3cmd
      run: |
        sudo apt-get install s3cmd
        s3cmd --version

    - name: Set up the s3 bucket for testing
      env:
        S3_BUCKET: test.macbre.net
        S3_REGION: eu-west-1

      run: |
        shopt -s expand_aliases # https://github.community/t/create-and-use-an-alias-inside-github-action/147616/3
        alias s3='s3cmd --access_key=${{ secrets.S3_ACCESS_KEY }} --secret_key=${{ secrets.S3_SECRET_KEY }}'
        set -x

        echo 'Hi!' | s3 put --acl-public - s3://${S3_BUCKET}/README
        echo 'I am a private file' | s3 put --acl-private - s3://${S3_BUCKET}/.private

        s3 ls s3://${S3_BUCKET}/
        curl -si https://s3-${S3_REGION}.amazonaws.com/${S3_BUCKET}/README

    - name: Checkout
      uses: actions/checkout@v3
    - name: Install PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}

    - name: Get composer cache directory
      id: composer-cache-directory
      run: |
        composer config cache-dir
        echo "::set-output name=dir::$(composer config cache-dir)"
    - name: composer cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache-directory.outputs.dir }}
        key: php-${{ matrix.php-versions }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          php-${{ matrix.php-versions }}-composer

    - name: Install a specific PHPUnit version
      if: ${{ matrix.phpunit }}
      run: |
        set -x
        composer --version
        composer require --dev --ignore-platform-reqs --with-all-dependencies phpunit/phpunit:^${{ matrix.phpunit }}

    - name: Install Composer dependencies
      if: ${{ ! matrix.phpunit }}
      run: |
        # if a package requires php: ^7, then the option --ignore-platform-req=php+ would allow installing on PHP8
        composer install --no-interaction --ignore-platform-req=php+

    - name: Test the code
      if: matrix.php-version != '8.0'
      run: composer run test

    #
    # PHP 8.0.x specific tasks follow
    #
    - name: Archive the project
      if: matrix.php-version == '8.0'
      run: |
        set -x
        composer archive --file archive
        tar -tvf archive.tar

    - name: Composer validation
      if: matrix.php-version == '8.0'
      run: |
        composer validate
        composer check-platform-reqs

    - name: Report the code coverage and upload it to Coveralls
      if: matrix.php-version == '8.0'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -x

        composer run coverage

        composer global require php-coveralls/php-coveralls
        php-coveralls --coverage_clover=.coverage.xml --json_path=/tmp/coverage.json -v
